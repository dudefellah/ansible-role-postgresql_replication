---
- name: Set replica postgresq.conf value
  include_tasks: update_conf_var.yml
  vars:
    _pg_conf_file: "{{ _postgresql_replication_postgresql_conf_filename }}"
    _pg_conf_name: "{{ conf_name }}"
  loop:
    - wal_level
    - max_wal_senders
    - max_replication_slots
    - wal_keep_segments
    - wal_keep_size
    - max_slot_wal_keep_size
    - wal_sender_timeout
    - track_commit_timestamp
    - synchronous_standby_names
    - vacuum_defer_cleanup_age
  loop_control:
    loop_var: conf_name
  when:
    - "postgresql_replication_primary|bool"
    - "postgresql_replication_postgresql_conf_configure|bool"

- block:
    - name: Prepare the pg_hba.conf file
      ansible.builtin.blockinfile:
        create: true
        path: "{{ _postgresql_replication_pg_hba_conf_filename }}"
        marker: "# {{ postgresql_replication_management_block_delim }} - {mark}"
        block: |
          {% for pg_hba in postgresql_replication_pg_hba_conf %}
          {{ pg_hba.type }}  {{ pg_hba.database }} {{ pg_hba.user }} {{ pg_hba.address | default('') }} {{ pg_hba.method }}
          {% endfor %}
      notify: reload postgres
      when:
        - "postgresql_replication_primary|bool"
        - "postgresql_replication_pg_hba_conf_configure|bool"
        - "postgresql_replication_primary|bool"

    - meta: flush_handlers

- name: Create replication user account
  community.postgresql.postgresql_user:
    name: "{{ postgresql_replication_replication_user }}"
    password: "{{ postgresql_replication_replication_password }}"
    role_attr_flags: replication
  delegate_to: "{{ inventory_hostname }}"
  become_user: "{{ postgresql_replication_postgresql_user }}"
  become: true
  when:
    - "postgresql_replication_primary|bool"
    - "postgresql_replication_replication_user is not none"
